
		let rflow = new Flow.ResourceFlow();
		let subscriber = {
			next(value) {
				console.log(value);
			}
		};
		rflow.Subscribe(subscriber);

		let res = new Resource(3, 100);		
		rflow.Inflow(res, "Add", 111);
		rflow.Inflow({
			OldState: res,
			Method: "Add",
			VarArgs: [ 222 ]
		});
		rflow.Inflow([
			res, "Add", [ 333 ]
		]);

		let ws = webSocket("ws://localhost:3087/ws");
		ws.subscribe(
			(msg) => console.log("message received: " + msg),
			(err) => console.log(err),
			() => console.log("complete")
		);
		ws.next(JSON.stringify({ op: "hello" }));

		rflow.Subscribe(ws);
		rflow.Add(res, 4);

		console.log(rflow);






		// let CacheRoller = new Cell([
		// 	new Organelle("roll-dP", (payload, oldPayload, o, c) => {
		// 		let roll = Dice.DP();

		// 		return {
		// 			...payload,
		// 			dp: roll,
		// 			cacheType: roll >= 80 ? "large" : "small"
		// 		};
		// 	}),
		// 	new Organelle("cache-size", (payload, oldPayload, o, c) => ({
		// 		...payload,
		// 		dice: payload.cacheType === "large" ? [ 2, 6 ] : [ 1, 6 ]
		// 	})),
		// 	new Organelle("cache-qty", (payload, oldPayload, o, c) => ({
		// 		...payload,
		// 		roll: Dice.Roll(...payload.dice)
		// 	}))
        // ]),
        // CacheRoller2 = CacheRoller.Copy(),
        // CacheRoller3 = CacheRoller.Copy(),
        // CacheRoller4 = CacheRoller.Copy(),
        // ant = new Relay();

        // ant.Attach(Cell.EnumEventType.METABOLISM, (obj) => {
        //     console.log(obj.data.Outflux.roll);
        // });

        // console.log(CacheRoller.GetHash());
        // console.log(CacheRoller);
        // console.log(CacheRoller2);

		// // CacheRoller.Subscribe(ant);
        // CacheRoller4.Subscribe(ant);

        // // CacheRoller2.Activator = () => Math.random() >= 0.5 ? true : false;

        // // CacheRoller.Entangle(CacheRoller2).Entangle(CacheRoller3).Entangle(CacheRoller4);
		// CacheRoller.Metabolize();
		
		let WS = new Cell([
			new Organelle("message", (payload, oldPayload, o, c) => {
				console.log(payload, oldPayload);

				c.speak("sup");
			})
		]);

        let beacon = new Beacon();
		beacon.Attach(Cell.EnumEventType.METABOLISM, (obj) => {
            console.log(obj);
		});
		WS.Subscribe(beacon);
		
		WS.Train("websocket", (cell, port, endpoint) => {
			if(endpoint[0] === "/") {
				endpoint = endpoint.substring(1);
			}

			cell.SetState({
				connection$: webSocket(`ws://localhost:${ port }/${ endpoint }`)
			});
			cell.GetState().connection$.subscribe(
				(payload, oldPayload) => cell.Metabolize(payload, oldPayload)
			);
		})
			.Train("send", (cell, ...args) => {
				cell.GetState().connection$.next(...args);
			})
			.Train("speak", (cell, ...args) => {
				console.log("HEYA! ^_^", ...args);
			});
		WS.Perform("websocket", 3087, `/ws`)
			.Perform("send", "PAYLOADDDDDDDDD")
			.Perform("send", "yo yo yo");